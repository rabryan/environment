snippet --- "add -- line" !b
-------------------------------------------------------------------------------
endsnippet

snippet generate "complete the generate"
generate
    ${1:}
end generate;
endsnippet

snippet GEN "GENERATE statement" !b
${1:<label>}: FOR ${2:<identifier>} IN ${3:<range>} GENERATE
${4:  [<declarative_part>
BEGIN]
}  ${5:<concurent_statements_part>}
END GENERATE $1;
endsnippet

snippet PROCESS "PROCESS statement" !b
${1:<label>}: PROCESS ${2:<sensitivity list>} IS
    ${3:<declarative_part>}
BEGIN
    ${4:<sequential_statements_part>}
END PROCESS $1;
endsnippet

snippet IF "IF statement" !b
${1:<label>}: IF ${2:<conditions>} THEN
    ${3:<assignments>}
END IF;
endsnippet

snippet SIGNAL "SIGNAL declaration" !b
SIGNAL ${1:<signal_name>}: ${2:<signal_type>} ${3:[range]} ${4:[:= default_value]}
endsnippet

snippet oz "(others => '0');"
(others => '${1:0}');
endsnippet

snippet ooz "(others => (others => '0'));"
(others => (others => '${1:0}'));
endsnippet

snippet slv "std_logic_vector"
std_logic_vector
endsnippet

snippet sl "std_logic"
std_logic
endsnippet

snippet dtz "downto 0);"
downto 0
endsnippet

snippet reg " signal reg_r, reg_nx : unsigned(x);" !b
signal ${1:<reg>}_r, $1_nx ${2:          }: ${3:unsigned}(${4:8} - 1 downto ${5:0});
endsnippet

# vim:ft=snippets:
